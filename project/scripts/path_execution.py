#!/usr/bin/env python

import rospy
import numpy as np
from crazyflie_driver.msg import Position
from geometry_msgs.msg import PoseStamped
from transform import Transform
from action import Crazyflie


class PathExecution:
    """ Class used to execute the path generated by the path planner """

    def __init__(self):
        self.pub_cmd = rospy.Publisher('/cf1/cmd_position', Position, queue_size=2)

        self.tf = Transform()
        self.cf = Crazyflie()

        self.rate = rospy.Rate(20)

    def execute_path(self, setpoints):
        tol_yaw = 10  # 10 degrees yaw tolerance
        # print("*************** New path ***************")
        # print("start pose: ",self.tf.position_msg(self.current_pose))
        # print("****************************************")

        """ Executing one set point in the path at a time """
        for setpoint in setpoints:
            goal_pose = self.tf.transform2odom(setpoint)
            goal_pose.header.seq = 0
            # print(goal_pose)
            # print("****************************************")
            if goal_pose:

                """ Rotate if the difference between current yaw and set point yaw is greater than a tolerance """
                if self.cf.yaw_difference(goal_pose.yaw) > tol_yaw:
                    self.cf.rotate(goal_pose.yaw)

                """ Fly straight to position of set point """
                self.cf.goTo(goal_pose)
                print("yaw: ", goal_pose.yaw)
