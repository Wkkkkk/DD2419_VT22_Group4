#!/usr/bin/env python

import rospy, tf2_ros
import tf2_geometry_msgs
from geometry_msgs.msg import TransformStamped, Vector3, PoseStamped
from aruco_msgs.msg import MarkerArray

def markers_detected(msg):
    for m in msg.markers:
        tf = transform(m)
        if tf:
            broadcaster.sendTransform(tf)
    #rospy.loginfo("Detected %s aruco markers: %s", len(markers), [m.id for m in markers])


def transform(m):
    global tf_buf

    # Create marker
    marker = PoseStamped()
    marker.pose = m.pose.pose
    marker.header.frame_id = 'cf1/camera_link'
    marker.header.stamp = m.header.stamp

    # Check if tranform if avaliable 
    if not tf_buf.can_transform(marker.header.frame_id, 'map', marker.header.stamp):
        rospy.logwarn_throttle(5.0, 'No transform from %s to map' % marker.header.frame_id)
        return

    #rospy.loginfo('send transform from %s to map' % marker.header.frame_id)
    
    # Transform from camera_link to map 
    position = tf_buf.transform(marker, 'map')

    # Create transformedStamped to publish
    pose_map = TransformStamped()
    pose_map.header.stamp = m.header.stamp
    pose_map.header.frame_id = 'map'
    pose_map.child_frame_id = 'aruco/detected' + str(m.id)
    pose_map.transform.translation = position.pose.position
    pose_map.transform.rotation = position.pose.orientation

    return pose_map
    

if __name__ == "__main__":
    rospy.init_node('assignment1')
    markers_subscriber = rospy.Subscriber('/aruco/markers',MarkerArray,markers_detected)
    broadcaster = tf2_ros.TransformBroadcaster()
    tf_buf = tf2_ros.Buffer()
    tf_listner = tf2_ros.TransformListener(tf_buf)

    rospy.spin()
